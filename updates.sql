--###################################################################################################################
--##########################################	ATUALIZAÇÕES	  ###################################################
--###################################################################################################################
/*
	OBJETIVO: em boletim, mudar o status do campo finalizado de false para true
	PARAMETROS: id_boletim
	RETORNO: void
*/
CREATE OR REPLACE FUNCTION FINALIZA_BO(ID_BO INT)
RETURNS VOID AS $$
DECLARE
	QTDE_COND INT;
	QTDE_VEIC INT;
BEGIN
	IF NOT EXISTS (SELECT * FROM BOLETIM WHERE ID_BOLETIM = ID_BO) THEN
		RAISE EXCEPTION 'ERRO: O CODIGO PARA O BOLETIM INFORMADO NAO EXISTE';
	END IF;
	IF ((SELECT FINALIZADO FROM BOLETIM WHERE ID_BOLETIM = ID_BO) = TRUE) THEN
		RAISE EXCEPTION 'ERRO: O BOLETIM JA SE ENCONTRA FINALIZADO';
	END IF;
	IF NOT EXISTS (SELECT * FROM BOLETIM NATURAL JOIN LOCALIZACAO NATURAL JOIN LOCALIZACAO_VIA WHERE ID_BOLETIM = ID_BO) THEN
		RAISE EXCEPTION 'ERRO: O BOLETIM NAO PODE SER FINALIZADO SEM QUE (AO MENOS UMA VIA) SEJA RELACIONADA';
	END IF;
	IF NOT EXISTS (SELECT * FROM ENVOLVIMENTO WHERE ID_BOLETIM = ID_BO) THEN
		RAISE EXCEPTION 'ERRO: O BOLETIM NAO PODE SER FINALIZADO SEM QUE (AO MENOS UM ENVOLVIDO) SEJA RELACIONADO';
	END IF;
	IF NOT EXISTS (SELECT * FROM VEICULO_ENVOLVIDO_BOLETIM WHERE ID_BOLETIM = ID_BO) THEN
		RAISE EXCEPTION 'ERRO: O BOLETIM NAO PODE SER FINALIZADO SEM QUE AO MENOS UM VEICULO SEJA RELACIONADO';
	END IF;
	
	SELECT COUNT(*) INTO QTDE_COND FROM ENVOLVIMENTO WHERE ID_BOLETIM = ID_BO AND CATEGORIA = 'CONDUTOR';
	SELECT COUNT(*) INTO QTDE_VEIC FROM VEICULO WHERE ID_VEICULO IN (SELECT ID_VEICULO FROM VEICULO_ENVOLVIDO_BOLETIM WHERE ID_BOLETIM = ID_BO);
	--SELECT COUNT(*) FROM VEICULO WHERE ID_VEICULO IN (SELECT ID_VEICULO FROM VEICULO_ENVOLVIDO_BOLETIM WHERE ID_BOLETIM = 13);
	
	IF(QTDE_COND <> QTDE_VEIC) THEN
		RAISE EXCEPTION 'ERRO: A QUANTIDADE DE VEICULOS INFORMADA É DIFERENTE DA QUANTIDADE DE CONTUDORES PARA ESTE  BOLETIM';
	END IF;
	
	UPDATE BOLETIM SET FINALIZADO = TRUE WHERE ID_BOLETIM = ID_BO;
END;
$$ Language 'plpgsql';






/*
	OBJETIVO: atualizar dados de um envolvido
	PARAMETROS: cpf, nome_coluna, valor_novo
	RETORNO: void
*/
CREATE OR REPLACE FUNCTION atualiza_dados_envolvido (cpf_env varchar(15), nome_coluna VARCHAR(30), valor VARCHAR(30))
RETURNS VOID AS $$
DECLARE
	nomeColuna VARCHAR(30) := lower(nome_coluna);
BEGIN
	IF ((nomeColuna <> 'nome_envolvido') AND (nomeColuna <> 'possui_cnh') AND (nomeColuna <> 'escolaridade') AND (nomeColuna <> 'endereco')) THEN
		RAISE EXCEPTION 'Erro: SOMENTE OS VALORES [nome_envolvido], [possui_cnh], [escolaridade] e [endereco] PODEM SER ALTERADOS PARA (ENVOLVIDO)';
	END IF;
	IF nomeColuna = 'nome_envolvido' THEN 
		UPDATE envolvido
		SET nome_envolvido = valor
		WHERE cpf = cpf_env;
	END IF;
	IF nomeColuna = 'possui_cnh' THEN 
		UPDATE envolvido
		SET possui_cnh = CAST(valor AS BOOL)
		WHERE cpf = cpf_env;
	END IF;
	IF nomeColuna = 'escolaridade' THEN
		UPDATE envolvido
		SET escolaridade = valor
		WHERE cpf = cpf_env;
	END IF;
	IF nomeColuna = 'endereco' THEN
		UPDATE envolvido
		SET endereco = valor
		WHERE cpf = cpf_env;
	END IF;	
END;
$$ LANGUAGE 'plpgsql';




/*
	OBJETIVO: atualizar validade de uma CNH
	PARAMETROS: numero_cnh, nova_data_validade
	RETORNO: void
*/
CREATE OR REPLACE FUNCTION ATUALIZA_VALIDADE_CNH(NUM VARCHAR(20), NOVA_DATA DATE)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM CNH WHERE NUM_CNH = NUM) THEN
		RAISE EXCEPTION 'ERRO: CNH NÃO ENCONTRADA';
	END IF;
	
	UPDATE CNH SET DT_VALIDADE_CNH = NOVA_DATA WHERE NUM_CNH = NUM;
END;
$$ Language 'plpgsql';





/*
	OBJETIVO: atualizar cor de um VEÍCULO
	PARAMETROS: placa_veiculo, nova_cor
	RETORNO: void
*/
CREATE OR REPLACE FUNCTION ATUALIZA_COR_VEICULO(PLACA_V VARCHAR(15), NOVA_COR VARCHAR(30))
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM VEICULO WHERE PLACA = PLACA_V) THEN
		RAISE EXCEPTION 'ERRO: VEÍCULO NÃO ENCONTRADO';
	END IF;
	
	UPDATE VEICULO SET COR = NOVA_COR WHERE PLACA = PLACA_V;
END;
$$ Language 'plpgsql';





/*
	OBJETIVO: atualizar nome de uma VIA
	PARAMETROS: id_via, novo_nome
	RETORNO: void
*/

CREATE OR REPLACE FUNCTION ATUALIZAR_NOME_VIA(ID_VI INT, NOVO_NOME VARCHAR(100))
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM VIA WHERE ID_VIA = ID_VI) THEN
		RAISE EXCEPTION 'ERRO: VIA NÃO ENCONTRADA';
	END IF;
	
	IF EXISTS (SELECT * FROM VIA WHERE NOME_VIA = NOVO_NOME) THEN
		RAISE EXCEPTION 'ERRO: JÁ EXISTE UMA VIA COM O MESMO NOME';
	END IF;
	
	UPDATE VIA SET NOME_VIA = NOVO_NOME WHERE ID_VIA = ID_VI;
END;
$$ Language 'plpgsql';